"""
This is a setup.py script generated by py2applet

Usage:
    python setup.py py2app
"""

from setuptools import setup
from distutils.core import setup
import py2app
import pygame
import sys
import os
import glob, shutil
sys.argv.append("py2app")

SCRIPT_MAIN = 'main.py'
text = open(SCRIPT_MAIN,'r')
f = open("final.py","w")
text = text.readlines()
def addfile(text,tofile):
    for line in text:
        if line[0:10] == "exec(open(":
            string = ""
            for char in line[11:]:
                if char != "'": string += char
                else: break
            newfile = open(string,"r")
            newtxt = newfile.readlines()
            addfile(newtxt,tofile)
            tofile.write("\n")
        else:
            tofile.write(line)

addfile(text,f)
f.close()


VERSION = '0.1'
AUTHOR_NAME = 'Thomas Steinke & Elliot Fiske'
AUTHOR_EMAIL = 'thomasteinke@gmail.com'
AUTHOR_URL = "http://www.thomassteinke.net"
PRODUCT_NAME = "Ludum Dare 27"
SCRIPT_MAIN = 'final.py'
VERSIONSTRING = PRODUCT_NAME + " ALPHA " + VERSION
ICONFILE = 'favicon.ico'

# Remove the build tree on exit automatically
REMOVE_BUILD_ON_EXIT = True
PYGAMEDIR = os.path.split(pygame.base.__file__)[0]

SDL_DLLS = glob.glob(os.path.join(PYGAMEDIR,'*.dll'))

if os.path.exists('dist/'): shutil.rmtree('dist/')

extra_files = [ ("",[ICONFILE]),
               ("data",glob.glob(os.path.join('data','*.dat'))),
               ("gfx",glob.glob(os.path.join('gfx','*.jpg'))),
               ("gfx",glob.glob(os.path.join('gfx','*.png'))),
               ("fonts",glob.glob(os.path.join('fonts','*.ttf'))),
               ("music",glob.glob(os.path.join('music','*.ogg'))),
               ("snd",glob.glob(os.path.join('snd','*.wav')))]

INCLUDE_STUFF = ['encodings',"encodings.latin_1",]

APP = ['final.py']
DATA_FILES = []
OPTIONS = {'argv_emulation': True,
    "optimize": 2,
    "includes": INCLUDE_STUFF,
    "compressed": 1,
    "excludes": []}

setup(
    app=APP,
    data_files=DATA_FILES,
    options={'py2app': OPTIONS},
    setup_requires=['py2app'],
    name = PRODUCT_NAME,
    version = VERSION,
    zipfile = None,
    author = AUTHOR_NAME,
    author_email = AUTHOR_EMAIL,
    url = AUTHOR_URL
      )

# Create the /save folder for inclusion with the installer
shutil.copytree('img','dist/'+PRODUCT_NAME+'.app/contents/Resources/img')
shutil.copytree('default','dist/'+PRODUCT_NAME+'.app/contents/Resources/default')
shutil.copytree('fonts','dist/'+PRODUCT_NAME+'.app/contents/Resources/fonts')
shutil.copytree('sounds','dist/'+PRODUCT_NAME+'.app/contents/Resources/sounds')

if os.path.exists('dist/tcl'): shutil.rmtree('dist/tcl')

# Remove the build tree
if REMOVE_BUILD_ON_EXIT:
    shutil.rmtree('build/')

if os.path.exists('dist/tcl84.dll'): os.unlink('dist/tcl84.dll')
if os.path.exists('dist/tk84.dll'): os.unlink('dist/tk84.dll')
